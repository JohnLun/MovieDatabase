// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace jm_sql.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20240926150826_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            Name = "Heath Ledger"
                        },
                        new
                        {
                            ActorId = 2,
                            Name = "Julia Stiles"
                        },
                        new
                        {
                            ActorId = 3,
                            Name = "Joseph Gordon-Levitt"
                        },
                        new
                        {
                            ActorId = 4,
                            Name = "Leonardo DiCaprio"
                        },
                        new
                        {
                            ActorId = 5,
                            Name = "Jonah Hill"
                        },
                        new
                        {
                            ActorId = 6,
                            Name = "Margot Robbie"
                        },
                        new
                        {
                            ActorId = 7,
                            Name = "Christian Bale"
                        },
                        new
                        {
                            ActorId = 8,
                            Name = "Justin Theroux"
                        },
                        new
                        {
                            ActorId = 9,
                            Name = "Josh Lucas"
                        },
                        new
                        {
                            ActorId = 10,
                            Name = "Ben Stiller"
                        },
                        new
                        {
                            ActorId = 11,
                            Name = "Robin Williamss"
                        },
                        new
                        {
                            ActorId = 12,
                            Name = "Owen Wilson"
                        },
                        new
                        {
                            ActorId = 13,
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            ActorId = 14,
                            Name = "Scarlett Johansson"
                        },
                        new
                        {
                            ActorId = 15,
                            Name = "Chris Evans"
                        });
                });

            modelBuilder.Entity("Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            ActorId = 1,
                            CharacterName = "Patrick Verona",
                            MovieId = 1
                        },
                        new
                        {
                            CharacterId = 2,
                            ActorId = 2,
                            CharacterName = "Kat Stratford",
                            MovieId = 1
                        },
                        new
                        {
                            CharacterId = 3,
                            ActorId = 3,
                            CharacterName = "Cameron James",
                            MovieId = 1
                        },
                        new
                        {
                            CharacterId = 4,
                            ActorId = 4,
                            CharacterName = "Jordan Belfort",
                            MovieId = 2
                        },
                        new
                        {
                            CharacterId = 5,
                            ActorId = 5,
                            CharacterName = "Donnie Azoff",
                            MovieId = 2
                        },
                        new
                        {
                            CharacterId = 6,
                            ActorId = 6,
                            CharacterName = "Naomi Lapaglia",
                            MovieId = 2
                        },
                        new
                        {
                            CharacterId = 7,
                            ActorId = 7,
                            CharacterName = "Patrick Bateman",
                            MovieId = 3
                        },
                        new
                        {
                            CharacterId = 8,
                            ActorId = 8,
                            CharacterName = "Timothy Bryce",
                            MovieId = 3
                        },
                        new
                        {
                            CharacterId = 9,
                            ActorId = 9,
                            CharacterName = "Craig McDermott",
                            MovieId = 3
                        },
                        new
                        {
                            CharacterId = 10,
                            ActorId = 10,
                            CharacterName = "Larry Daley",
                            MovieId = 4
                        },
                        new
                        {
                            CharacterId = 11,
                            ActorId = 11,
                            CharacterName = "Theodore Roosevelt",
                            MovieId = 4
                        },
                        new
                        {
                            CharacterId = 12,
                            ActorId = 12,
                            CharacterName = "Jebediah Smith",
                            MovieId = 4
                        },
                        new
                        {
                            CharacterId = 13,
                            ActorId = 13,
                            CharacterName = "Tony Stark / Iron Man",
                            MovieId = 5
                        },
                        new
                        {
                            CharacterId = 14,
                            ActorId = 14,
                            CharacterName = "Natasha Romanov / Black Widow",
                            MovieId = 5
                        },
                        new
                        {
                            CharacterId = 15,
                            ActorId = 15,
                            CharacterName = "Steve Rodgers / Captain America",
                            MovieId = 5
                        });
                });

            modelBuilder.Entity("Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            DirectorId = 1,
                            Name = "Gil Junger"
                        },
                        new
                        {
                            DirectorId = 2,
                            Name = "Martin Scorsese"
                        },
                        new
                        {
                            DirectorId = 3,
                            Name = "Mary Harron"
                        },
                        new
                        {
                            DirectorId = 4,
                            Name = "Shawn Levy"
                        },
                        new
                        {
                            DirectorId = 5,
                            Name = "Russo Brothers"
                        });
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Horror"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Fantasy"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Thriller"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Romance"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Mystery"
                        },
                        new
                        {
                            GenreId = 11,
                            Name = "Documentary"
                        },
                        new
                        {
                            GenreId = 12,
                            Name = "Animation"
                        },
                        new
                        {
                            GenreId = 13,
                            Name = "Musical"
                        },
                        new
                        {
                            GenreId = 14,
                            Name = "Crime"
                        },
                        new
                        {
                            GenreId = 15,
                            Name = "War"
                        },
                        new
                        {
                            GenreId = 16,
                            Name = "Western"
                        },
                        new
                        {
                            GenreId = 17,
                            Name = "Historical"
                        },
                        new
                        {
                            GenreId = 18,
                            Name = "Biographical"
                        },
                        new
                        {
                            GenreId = 19,
                            Name = "Family"
                        },
                        new
                        {
                            GenreId = 20,
                            Name = "Superhero"
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("integer");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DirectorId")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("Runtime")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            DirectorId = 1,
                            Rating = "PG-13",
                            ReleaseDate = new DateOnly(1999, 3, 31),
                            Runtime = 97,
                            Title = "10 Things I Hate About You"
                        },
                        new
                        {
                            MovieId = 2,
                            DirectorId = 2,
                            Rating = "R",
                            ReleaseDate = new DateOnly(2013, 12, 25),
                            Runtime = 180,
                            Title = "The Wolf of Wall Street"
                        },
                        new
                        {
                            MovieId = 3,
                            DirectorId = 3,
                            Rating = "R",
                            ReleaseDate = new DateOnly(2000, 4, 14),
                            Runtime = 104,
                            Title = "American Psycho"
                        },
                        new
                        {
                            MovieId = 4,
                            DirectorId = 4,
                            Rating = "PG",
                            ReleaseDate = new DateOnly(2006, 12, 17),
                            Runtime = 108,
                            Title = "Night at the Museum"
                        },
                        new
                        {
                            MovieId = 5,
                            DirectorId = 5,
                            Rating = "PG-13",
                            ReleaseDate = new DateOnly(2019, 4, 26),
                            Runtime = 181,
                            Title = "Avengers: Endgame"
                        });
                });

            modelBuilder.Entity("Character", b =>
                {
                    b.HasOne("Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.HasOne("Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Director", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
